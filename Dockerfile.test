FROM nvidia/cuda:11.8.0-cudnn8-devel-ubuntu20.04

# Set noninteractive installation
ENV DEBIAN_FRONTEND=noninteractive

# Install system dependencies with X11 and Qt support packages
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    cmake \
    git \
    curl \
    wget \
    unzip \
    ca-certificates \
    libopenexr-dev \
    libgl1-mesa-dev \
    libgl1-mesa-glx \
    libglew-dev \
    libosmesa6-dev \
    libxrender1 \
    libsm6 \
    libxext6 \
    libglu1-mesa-dev \
    libxcursor-dev \
    libxinerama-dev \
    libxi-dev \
    libpython3-dev \
    python3.8 \
    python3.8-dev \
    python3-pip \
    python3.8-venv \
    python3-numpy \
    python-is-python3 \
    libglib2.0-0 \
    libgtk2.0-0 \
    vim \
    # Additional OpenGL/GLX packages for better compatibility
    mesa-utils \
    mesa-common-dev \
    libegl1-mesa-dev \
    libgl1-mesa-dri \
    libglvnd-dev \
    libglx-mesa0 \
    # Required for Qt/XCB in headless environment
    libxcb1 \
    libxcb-icccm4 \
    libxcb-image0 \
    libxcb-keysyms1 \
    libxcb-randr0 \
    libxcb-render-util0 \
    libxcb-render0 \
    libxcb-shape0 \
    libxcb-shm0 \
    libxcb-sync1 \
    libxcb-util1 \
    libxcb-xfixes0 \
    libxcb-xinerama0 \
    libxcb-xkb1 \
    libx11-xcb1 \
    libxkbcommon-x11-0 \
    # For headless X11
    xvfb \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Create required directories
RUN mkdir -pv /local/src /local/configs /local/scripts /local/work /local/cache /local/assets /local/data /local/drema /local/submodules /root/install

# Set CUDA environment variables
ENV CUDA_HOME="/usr/local/cuda"
ENV PATH="${CUDA_HOME}/bin:${PATH}"
ENV LD_LIBRARY_PATH="${CUDA_HOME}/lib64:${LD_LIBRARY_PATH}"

# Set Python 3.8 as default
RUN ln -sf /usr/bin/python3.8 /usr/bin/python3 && \
    ln -sf /usr/bin/python3 /usr/bin/python && \
    ln -sf /usr/bin/pip3 /usr/bin/pip

# Upgrade pip
RUN pip install --upgrade pip==23.0.1

# Use locally available CoppeliaSim file
WORKDIR /root/install
# Copy the CoppeliaSim file from local context to the container
COPY CoppeliaSim_Edu_V4_1_0_Ubuntu20_04.tar.xz /root/install/
# Extract CoppeliaSim
RUN mkdir -p /opt/coppeliaSim && \
    tar -xf CoppeliaSim_Edu_V4_1_0_Ubuntu20_04.tar.xz -C /opt/coppeliaSim --strip-components=1 && \
    rm CoppeliaSim_Edu_V4_1_0_Ubuntu20_04.tar.xz

# Set CoppeliaSim environment variables - MUST BE SET BEFORE PyRep INSTALLATION
ENV COPPELIASIM_ROOT=/opt/coppeliaSim
ENV LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$COPPELIASIM_ROOT
ENV QT_QPA_PLATFORM_PLUGIN_PATH=$COPPELIASIM_ROOT

# Force Qt to use offscreen rendering mode (for headless operation)
ENV QT_QPA_PLATFORM=offscreen

# Make CoppeliaSim executable
RUN chmod +x /opt/coppeliaSim/coppeliaSim.sh

# Install basic dependencies first
RUN pip install numpy cffi

# Clone PyRep
WORKDIR /root/install
RUN git clone https://github.com/stepjam/PyRep.git

# Build and install PyRep with verbose output
WORKDIR /root/install/PyRep
RUN pip install -r requirements.txt && \
    echo "Building PyRep..." && \
    VERBOSE=1 pip install -e . && \
    echo "PyRep installation complete."

# Test PyRep installation with a script file (with headless awareness)
RUN echo '#!/usr/bin/env python3\nimport sys\nimport os\n# Force headless mode\nos.environ["QT_QPA_PLATFORM"] = "offscreen"\ntry:\n    import pyrep\n    print("PyRep import successful")\n    from pyrep.backend import sim\n    print("PyRep backend imported successfully")\nexcept ImportError as e:\n    print(f"Import error: {e}", file=sys.stderr)\n    print("Checking for shared libraries...", file=sys.stderr)\n    import subprocess\n    print(subprocess.check_output(["ldconfig", "-p"]).decode(), file=sys.stderr)\n    sys.exit(1)' > /root/test_pyrep.py && \
    python /root/test_pyrep.py

# Clone and install RLBench (peract fork)
WORKDIR /root/install
RUN git clone -b peract https://github.com/MohitShridhar/RLBench.git

# Install RLBench with explicit development mode
WORKDIR /root/install/RLBench
RUN pip install -r requirements.txt && \
    pip install -e .

# Test RLBench installation
RUN echo '#!/usr/bin/env python3\nimport os\n# Force headless mode\nos.environ["QT_QPA_PLATFORM"] = "offscreen"\nimport rlbench\nprint("RLBench import successful")' > /root/test_rlbench.py && \
    python /root/test_rlbench.py

# Clone and install YARR (peract fork)
WORKDIR /root/install
RUN git clone -b peract https://github.com/MohitShridhar/YARR.git 

# Install YARR
WORKDIR /root/install/YARR
RUN pip install --no-deps -e . && \
    # Install dependencies in batches to manage conflicts
    pip install tensorboard moviepy natsort psutil timeout-decorator pyrender==0.1.45 && \
    pip install 'omegaconf<2.1,>=2.0.0' && \
    pip install hydra-core==1.0.5 pandas==1.4.1 opencv-python

# Test YARR installation
RUN echo '#!/usr/bin/env python3\nimport yarr\nprint("YARR import successful")' > /root/test_yarr.py && \
    python /root/test_yarr.py

# Clone PerAct
WORKDIR /root/install
RUN git clone https://github.com/peract/peract.git && \
    ls -la /root/install/peract

# Install CLIP (required by PerAct)
RUN pip install git+https://github.com/openai/CLIP.git

# Install PerAct requirements
WORKDIR /root/install/peract
RUN pip install -r requirements.txt

# Explicitly install torch and torchvision compatible with CUDA 11.8
RUN pip install torch==1.13.1+cu117 torchvision==0.14.1+cu117 --extra-index-url https://download.pytorch.org/whl/cu117

# Install pytorch3d (specific version from requirements.txt)
RUN pip install pytorch3d==0.3.0

# Set PerAct environment variable
ENV PERACT_ROOT=/root/install/peract

# Set PYTHONPATH to include the repository root and dependencies
ENV PYTHONPATH="/root/install/peract:/root/install/RLBench:/root/install/YARR:/root/install/PyRep"

# Test that we can import PerAct modules directly as used in eval.py
RUN cd /root/install/peract && \
    python -c "from helpers import utils; print('Basic PerAct import successful!')"

COPY opengl_setup.sh /usr/local/bin/
RUN chmod +x /usr/local/bin/opengl_setup.sh

COPY run_peract.sh /usr/local/bin/
RUN chmod +x /usr/local/bin/run_peract.sh

# For backward compatibility, create a symlink for opengl_setup.sh
RUN ln -sf /usr/local/bin/run_peract.sh /usr/local/bin/opengl_setup.sh

# Copy test scripts
COPY test_peract_env.py /root/test_peract_env.py
COPY test_pyrep.py /root/test_pyrep.py
RUN chmod +x /root/test_peract_env.py /root/test_pyrep.py

# Create README for headless operation
RUN echo '# PerAct Headless Operation\n\n\
    ## Running on Compute Clusters\n\n\
    This container is configured for headless operation, which is required when running on compute clusters without X11 display.\n\n\
    ## Key Environment Variables\n\n\
    The following environment variables are set for headless operation:\n\n\
    ```\n\
    QT_QPA_PLATFORM=offscreen    # Forces Qt to use offscreen rendering\n\
    PYOPENGL_PLATFORM=egl        # Use EGL for OpenGL contexts\n\
    LIBGL_ALWAYS_SOFTWARE=1      # Use software rendering\n\
    ```\n\n\
    ## Running PerAct\n\n\
    Use the provided helper script to run PerAct commands:\n\n\
    ```bash\n\
    apptainer run --nv your-image.sif /usr/local/bin/run_peract.sh python eval.py [args...]\n\
    ```\n\n\
    ## Troubleshooting\n\n\
    If you encounter OpenGL/Qt errors, make sure to:\n\n\
    1. Always use headless=True in RLBench environments\n\
    2. Always use the helper scripts provided\n\
    3. Run with the --nv flag when GPU acceleration is needed\n\
    ' > /local/README_HEADLESS.md

# Copy all project files (if needed)
WORKDIR /local
COPY . /local/

# Set up volumes for persistent storage
VOLUME /local/work
VOLUME /local/cache
VOLUME /local/data

# Set default working directory
WORKDIR /local/