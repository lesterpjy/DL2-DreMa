FROM nvidia/cuda:11.8.0-cudnn8-devel-ubuntu20.04

# Set noninteractive installation
ENV DEBIAN_FRONTEND=noninteractive

# Install system dependencies with extra OpenGL packages
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    cmake \
    git \
    curl \
    wget \
    unzip \
    ca-certificates \
    libopenexr-dev \
    libgl1-mesa-dev \
    libgl1-mesa-glx \
    libglew-dev \
    libosmesa6-dev \
    libxrender1 \
    libsm6 \
    libxext6 \
    libglu1-mesa-dev \
    libxcursor-dev \
    libxinerama-dev \
    libxi-dev \
    libpython3-dev \
    python3.8 \
    python3.8-dev \
    python3-pip \
    python3.8-venv \
    python3-numpy \
    python-is-python3 \
    libglib2.0-0 \
    libgtk2.0-0 \
    vim \
    # Additional OpenGL/GLX packages for better container/host compatibility
    mesa-utils \
    mesa-common-dev \
    libegl1-mesa-dev \
    libgl1-mesa-dri \
    libglvnd-dev \
    libglx-mesa0 \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Create required directories
RUN mkdir -pv /local/src /local/configs /local/scripts /local/work /local/cache /local/assets /local/data /local/drema /local/submodules /root/install

# Set CUDA environment variables
ENV CUDA_HOME="/usr/local/cuda"
ENV PATH="${CUDA_HOME}/bin:${PATH}"
ENV LD_LIBRARY_PATH="${CUDA_HOME}/lib64:${LD_LIBRARY_PATH}"

# Set Python 3.8 as default
RUN ln -sf /usr/bin/python3.8 /usr/bin/python3 && \
    ln -sf /usr/bin/python3 /usr/bin/python && \
    ln -sf /usr/bin/pip3 /usr/bin/pip

# Upgrade pip
RUN pip install --upgrade pip==23.0.1

# Use locally available CoppeliaSim file
WORKDIR /root/install
# Copy the CoppeliaSim file from local context to the container
COPY CoppeliaSim_Edu_V4_1_0_Ubuntu20_04.tar.xz /root/install/
# Extract CoppeliaSim
RUN mkdir -p /opt/coppeliaSim && \
    tar -xf CoppeliaSim_Edu_V4_1_0_Ubuntu20_04.tar.xz -C /opt/coppeliaSim --strip-components=1 && \
    rm CoppeliaSim_Edu_V4_1_0_Ubuntu20_04.tar.xz

# Set CoppeliaSim environment variables - MUST BE SET BEFORE PyRep INSTALLATION
ENV COPPELIASIM_ROOT=/opt/coppeliaSim
ENV LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$COPPELIASIM_ROOT
ENV QT_QPA_PLATFORM_PLUGIN_PATH=$COPPELIASIM_ROOT

# Make CoppeliaSim executable
RUN chmod +x /opt/coppeliaSim/coppeliaSim.sh

# Install basic dependencies first
RUN pip install numpy cffi

# Clone PyRep
WORKDIR /root/install
RUN git clone https://github.com/stepjam/PyRep.git

# Build and install PyRep with verbose output
WORKDIR /root/install/PyRep
RUN pip install -r requirements.txt && \
    echo "Building PyRep..." && \
    VERBOSE=1 pip install -e . && \
    echo "PyRep installation complete."

# Test PyRep installation with a script file
RUN echo '#!/usr/bin/env python3\nimport sys\ntry:\n    import pyrep\n    print("PyRep import successful")\n    from pyrep.backend import sim\n    print("PyRep backend imported successfully")\nexcept ImportError as e:\n    print(f"Import error: {e}", file=sys.stderr)\n    print("Checking for shared libraries...", file=sys.stderr)\n    import subprocess\n    print(subprocess.check_output(["ldconfig", "-p"]).decode(), file=sys.stderr)\n    sys.exit(1)' > /root/test_pyrep.py && \
    python /root/test_pyrep.py

# Clone and install RLBench (peract fork)
WORKDIR /root/install
RUN git clone -b peract https://github.com/MohitShridhar/RLBench.git

# Install RLBench with explicit development mode
WORKDIR /root/install/RLBench
RUN pip install -r requirements.txt && \
    pip install -e .

# Test RLBench installation
RUN echo '#!/usr/bin/env python3\nimport rlbench\nprint("RLBench import successful")' > /root/test_rlbench.py && \
    python /root/test_rlbench.py

# Clone and install YARR (peract fork)
WORKDIR /root/install
RUN git clone -b peract https://github.com/MohitShridhar/YARR.git 

# Install YARR
WORKDIR /root/install/YARR
RUN pip install --no-deps -e . && \
    # Install dependencies in batches to manage conflicts
    pip install tensorboard moviepy natsort psutil timeout-decorator pyrender==0.1.45 && \
    pip install 'omegaconf<2.1,>=2.0.0' && \
    pip install hydra-core==1.0.5 pandas==1.4.1 opencv-python

# Test YARR installation
RUN echo '#!/usr/bin/env python3\nimport yarr\nprint("YARR import successful")' > /root/test_yarr.py && \
    python /root/test_yarr.py

# Clone PerAct
WORKDIR /root/install
RUN git clone https://github.com/peract/peract.git && \
    ls -la /root/install/peract

# Install CLIP (required by PerAct)
RUN pip install git+https://github.com/openai/CLIP.git

# Install PerAct requirements
WORKDIR /root/install/peract
RUN pip install -r requirements.txt

# Explicitly install torch and torchvision compatible with CUDA 11.8
RUN pip install torch==1.13.1+cu117 torchvision==0.14.1+cu117 --extra-index-url https://download.pytorch.org/whl/cu117

# Install pytorch3d (specific version from requirements.txt)
RUN pip install pytorch3d==0.3.0

# Set PerAct environment variable
ENV PERACT_ROOT=/root/install/peract

# Set PYTHONPATH to include the repository root and dependencies
ENV PYTHONPATH="/root/install/peract:/root/install/RLBench:/root/install/YARR:/root/install/PyRep"

# Test that we can import PerAct modules directly as used in eval.py
RUN cd /root/install/peract && \
    python -c "from helpers import utils; print('Basic PerAct import successful!')"

# Create OpenGL wrapper script to help with Singularity/Apptainer
RUN echo '#!/bin/bash\n\
    # OpenGL environment setup script for Singularity/Apptainer containers\n\
    # This helps isolate container OpenGL from host OpenGL to avoid GLIBC version conflicts\n\
    \n\
    # Display current OpenGL libraries path\n\
    echo "Current LD_LIBRARY_PATH: $LD_LIBRARY_PATH"\n\
    \n\
    # Check if running inside Singularity/Apptainer\n\
    if [ -n "$SINGULARITY_CONTAINER" ] || [ -n "$APPTAINER_CONTAINER" ]; then\n\
    echo "Running inside Singularity/Apptainer container"\n\
    \n\
    # Save original path\n\
    export ORIGINAL_LD_LIBRARY_PATH="$LD_LIBRARY_PATH"\n\
    \n\
    # Add container OpenGL paths to front of LD_LIBRARY_PATH to prioritize them\n\
    if [ -d "/usr/lib/x86_64-linux-gnu/mesa" ]; then\n\
    export LD_LIBRARY_PATH="/usr/lib/x86_64-linux-gnu/mesa:$LD_LIBRARY_PATH"\n\
    echo "Added container Mesa libraries to LD_LIBRARY_PATH"\n\
    fi\n\
    \n\
    # Prevent certain host libraries from being used if they exist in container\n\
    export __EGL_VENDOR_LIBRARY_DIRS="/usr/share/glvnd/egl_vendor.d"\n\
    export __GLX_VENDOR_LIBRARY_NAME="mesa"\n\
    \n\
    # Try to isolate X11 display if it exists\n\
    if [ -d "/tmp/.X11-unix" ]; then\n\
    echo "Setting up X11 display isolation"\n\
    export DISPLAY="${DISPLAY:-:0}"\n\
    fi\n\
    \n\
    # Set vars to prefer container libraries\n\
    export LD_LIBRARY_PATH="/usr/lib/x86_64-linux-gnu:/usr/lib:$LD_LIBRARY_PATH"\n\
    \n\
    echo "Updated LD_LIBRARY_PATH: $LD_LIBRARY_PATH"\n\
    else\n\
    echo "Not running in Singularity/Apptainer container, no changes made"\n\
    fi\n\
    \n\
    echo "OpenGL environment setup complete"\n\
    \n\
    # Execute the command passed to this script\n\
    if [ $# -gt 0 ]; then\n\
    echo "Executing: $@"\n\
    exec "$@"\n\
    fi' > /usr/local/bin/opengl_setup.sh && \
    chmod +x /usr/local/bin/opengl_setup.sh

# Copy test scripts to verify installation
COPY test_peract_env.py /root/test_peract_env.py
COPY test_pyrep.py /root/test_pyrep.py
RUN chmod +x /root/test_peract_env.py /root/test_pyrep.py

# Create comprehensive test script with OpenGL isolation
RUN echo '#!/usr/bin/env python3\nimport sys\nprint("Python Path:", sys.path)\ntry:\n    # Only import non-OpenGL dependent modules for basic check\n    import numpy\n    print("✅ NumPy import successful")\n    import torch\n    print("✅ PyTorch import successful")\n    import yarr\n    print("✅ YARR import successful")\n    # Check PerAct module existence\n    import os\n    os.chdir("/root/install/peract")\n    # Try a minimal import that should work without OpenGL\n    from helpers import utils\n    print("✅ helpers.utils import successful")\n    print("\\nBasic imports successful! Full OpenGL-dependent imports may require runtime environment setup.")\nexcept ImportError as e:\n    print(f"❌ Import error: {e}")\n    sys.exit(1)' > /root/test_basic_imports.py && \
    python /root/test_basic_imports.py

# Copy all project files (if needed)
WORKDIR /local
COPY . /local/

# Copy our updated test script
COPY test_peract_env.py /local/scripts/test_peract_env.py

# Create a README explaining the OpenGL issue
RUN echo '# PerAct Environment Notes\n\n\
    ## OpenGL/GLX Library Compatibility\n\n\
    When running this container in Singularity/Apptainer with the `--nv` flag, you may encounter GLIBC version conflicts with OpenGL/GLX libraries.\n\
    This happens because Singularity binds host GPU libraries which may require newer GLIBC versions than available in Ubuntu 20.04.\n\n\
    ## Solutions\n\n\
    ### 1. Use the OpenGL wrapper script\n\n\
    ```bash\n\
    singularity exec --nv your-image.sif /usr/local/bin/opengl_setup.sh your-command\n\
    ```\n\n\
    ### 2. Use the updated test script\n\n\
    We provide a modified test script that checks package availability without requiring OpenGL initialization:\n\n\
    ```bash\n\
    singularity exec --nv your-image.sif python /local/scripts/test_peract_env.py\n\
    ```\n\n\
    ### 3. For SLURM jobs\n\n\
    ```bash\n\
    #!/bin/bash\n\
    #SBATCH --partition=gpu\n\
    #SBATCH --gres=gpu:1\n\
    \n\
    apptainer run --nv your-image.sif /usr/local/bin/opengl_setup.sh python your-script.py\n\
    ```\n' > /local/README_OPENGL.md

# Set up volumes for persistent storage
VOLUME /local/work
VOLUME /local/cache
VOLUME /local/data

# Set default working directory
WORKDIR /local/