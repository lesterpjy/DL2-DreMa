#!/bin/bash
#SBATCH --partition=gpu_a100
#SBATCH --gpus=1
#SBATCH --output=work/diffuser_train_peract_%A.out
#SBATCH --time=25:00:00
#SBATCH --ntasks=1

module purge
module load 2023

echo "=== Slurm Job: Starting 3D Diffuser Actor Training (PerAct Setup) ==="
PROJECT_ROOT_ON_HOST=$(pwd)
CONTAINER_IMAGE_PATH="${PROJECT_ROOT_ON_HOST}/diffuser_actor_jammy.sif"

# --- Path to the pre-packaged PerAct data on the host ---
# HOST_PERACT_PACKAGED_DATA_ROOT="/scratch-shared/tmp.lUdVGE8VOd/Peract_onetask_repackaged" # contains train and val for rlbench
HOST_PERACT_PACKAGED_DATA_ROOT="/scratch-shared/tmp.lUdVGE8VOd/mixed_onetask_repackaged" # contains train and val for rlbench + drema

CONTAINER_DATA_BASE_PATH="/data_in_container" # An arbitrary base path in container for clarity
CONTAINER_PERACT_PACKAGED_PATH="${CONTAINER_DATA_BASE_PATH}/Peract_packaged"

# load external known good ttt file
HOST_GOOD_TTT_FILE="/scratch-shared/tmp.lUdVGE8VOd/good_rlbench_assets/task_design.ttt"
CONTAINER_MOUNTED_GOOD_TTT_FILE="/good_assets_host/task_design.ttt"
if [ ! -f "${HOST_GOOD_TTT_FILE}" ]; then
    echo "ERROR: Known-good TTT file not found at ${HOST_GOOD_TTT_FILE} on the HOST"
    exit 1
else
    echo "INFO: Found known-good TTT file at ${HOST_GOOD_TTT_FILE} on the HOST"
fi

echo "Host Project Root: ${PROJECT_ROOT_ON_HOST}"
echo "Contents of PROJECT_ROOT_ON_HOST (${PROJECT_ROOT_ON_HOST}):"
ls -ld "${PROJECT_ROOT_ON_HOST}"
ls -l "${PROJECT_ROOT_ON_HOST}"

echo "Container Image: ${CONTAINER_IMAGE_PATH}"
echo "Host PerAct Packaged Data: ${HOST_PERACT_PACKAGED_DATA_ROOT}"
echo "Container PerAct Packaged Data will be at: ${CONTAINER_PERACT_PACKAGED_PATH}"

# define parameters from train_keypose_peract.sh
main_dir_in_container="/dream-team/3d_diffuser_actor/Actor_Peract-Drema_100k_slide_output"
dataset_in_container="${CONTAINER_PERACT_PACKAGED_PATH}/train"
valset_in_container="${CONTAINER_PERACT_PACKAGED_PATH}/val"
instructions_in_container="../instructions/peract/instructions.pkl" # "instructions/peract/instructions.pkl" # Relative to /dream-team/3d_diffuser_actor
gripper_loc_bounds_in_container="tasks/18_peract_tasks_location_bounds.json"

lr="1e-4"
dense_interpolation="1"
interpolation_length="2"
num_history="3"
diffusion_timesteps="100"
B="4" # batch size
C="120" # embedding dim
ngpus_torchrun="1"
quaternion_format="xyzw"

mkdir -p "${PROJECT_ROOT_ON_HOST}/3d_diffuser_actor/Actor_Peract-Drema_100k_slide_output"

apptainer exec --nv \
  --bind "${PROJECT_ROOT_ON_HOST}":/dream-team \
  --bind "/scratch-shared":/scratch-shared \
  --bind "${HOST_PERACT_PACKAGED_DATA_ROOT}":"${CONTAINER_PERACT_PACKAGED_PATH}":ro \
  --bind "${HOST_GOOD_TTT_FILE}":"${CONTAINER_MOUNTED_GOOD_TTT_FILE}":ro \
  "${CONTAINER_IMAGE_PATH}" \
  /bin/bash -c '
    set -e
    echo "--- Inside Apptainer Container for Training (COMMAND_INSIDE_CONTAINER) ---"

    echo "Current user: $(whoami)"
    echo "--- Verifying Python Environment ---"
    echo "Initial PATH: $PATH"
    if [ -f /opt/diffuser_venv/bin/activate ]; then
        echo "Sourcing /opt/diffuser_venv/bin/activate manually for verification..."
        source /opt/diffuser_venv/bin/activate
        echo "PATH after manual source: $PATH"
    else
        echo "WARNING: /opt/diffuser_venv/bin/activate not found for manual sourcing!"
    fi
    echo "which python: $(which python || echo "which python command failed")"
    echo "python --version: $(python --version || echo "python --version command failed")"
    echo "pip --version: $(pip --version || echo "pip --version command failed")"
    echo "--- End Python Environment Verification ---"

    # torch.backends.cudnn settings status
    python -c "import torch; print(f\"torch.backends.cudnn.benchmark: {torch.backends.cudnn.benchmark}\"); print(f\"torch.backends.cudnn.deterministic: {torch.backends.cudnn.deterministic}\"); print(f\"torch.backends.cudnn.enabled: {torch.backends.cudnn.enabled}\")"

    echo "--- Checking existence of TTT file from shell BEFORE setting ENV var ---";
    ls -l "'"${CONTAINER_MOUNTED_GOOD_TTT_FILE}"'" || echo "WARNING: ls -l failed for ${CONTAINER_MOUNTED_GOOD_TTT_FILE}"; # Note quoting for var

    export RLBENCH_OVERRIDE_TTT_FILE_PATH="'"${CONTAINER_MOUNTED_GOOD_TTT_FILE}"'";
    echo "RLBENCH_OVERRIDE_TTT_FILE_PATH set to: ${RLBENCH_OVERRIDE_TTT_FILE_PATH}";
    echo "--- Checking existence of TTT file from shell AFTER setting ENV var (should be same) ---";
    ls -l "${RLBENCH_OVERRIDE_TTT_FILE_PATH}" || echo "WARNING: ls -l failed for ${RLBENCH_OVERRIDE_TTT_FILE_PATH}";

    echo "Listing /dream-team:"
    ls -l /dream-team

    cd /dream-team/3d_diffuser_actor # This MUST work if bind mount is successful
    echo "Current PWD: $(pwd)"

    echo "Creating output directory: '"${main_dir_in_container}"'" # Note quoting for var
    mkdir -p "'"${main_dir_in_container}"'"

    echo "Starting training script..."
    export CUDA_LAUNCH_BLOCKING=1

    echo "NVIDIA-SMI:"
    nvidia-smi

    # xvfb-run -a # only if needed
    torchrun --nproc_per_node '"${ngpus_torchrun}"' --master_port $(($RANDOM % 10000 + 20000)) \
        main_trajectory.py \
        --tasks slide_block_to_color_target \
        --dataset "'"$(echo "${dataset_in_container}")"'" \
        --valset "'"$(echo "${valset_in_container}")"'" \
        --instructions "'"$(echo "${instructions_in_container}")"'" \
        --gripper_loc_bounds "'"$(echo "${gripper_loc_bounds_in_container}")"'" \
        --num_workers 1 \
        --train_iters 100000 \
        --embedding_dim '"${C}"' \
        --use_instruction 1 \
        --rotation_parametrization 6D \
        --diffusion_timesteps '"${diffusion_timesteps}"' \
        --val_freq 1000 \
        --dense_interpolation '"${dense_interpolation}"' \
        --interpolation_length '"${interpolation_length}"' \
        --exp_log_dir "'"$(echo "${main_dir_in_container}")"'" \
        --batch_size '"${B}"' \
        --batch_size_val 8 \
        --cache_size 600 \
        --cache_size_val 0 \
        --keypose_only 1 \
        --variations {0..3} \
        --lr '"${lr}"' \
        --num_history '"${num_history}"' \
        --cameras left_shoulder right_shoulder front \
        --max_episodes_per_task -1 \
        --quaternion_format '"${quaternion_format}"' \
        --run_log_dir diffusion_multitask-C${C}-B${B}-lr${lr}-DI${dense_interpolation}-${interpolation_length}-H${num_history}-DT${diffusion_timesteps}_QUICKTEST

    echo "Training script finished."
'

EXIT_CODE=$?
echo "=== Slurm Job: 3D Diffuser Actor Training Finished with exit code $EXIT_CODE ==="
exit $EXIT_CODE
