#!/bin/bash

#SBATCH --partition=gpu_a100          # Partition name
#SBATCH --gres=gpu:1                  # Number of GPUs to allocate
#SBATCH --cpus-per-task=8             # Number of CPU cores per task
#SBATCH --gpus=1                      # This line is sometimes optional/redundant
#SBATCH --job-name=peract_env_test    # Job name
#SBATCH --ntasks=1                    # Number of tasks
#SBATCH --time=00:30:00               # Time limit hh:mm:ss
#SBATCH --mem=16000M                  # Memory pool for all cores (16GB)
#SBATCH --output=work/peract_env_test_%A.out  # Standard output

### --- MODULE SETUP / ENVIRONMENT ---
module purge
module load 2023
# Uncomment if your cluster requires Apptainer module
# module load Apptainer/<VERSION>

### --- PREPARE DIRECTORIES ---
mkdir -p work scripts

### --- COPY TEST ENVIRONMENT SCRIPT ---
cat > scripts/test_env.py << 'EOF'
#!/usr/bin/env python3
"""
Script to verify the PerAct environment and installed packages.
This checks all the critical components needed for PerAct to work.
"""

import os
import sys
import subprocess
import importlib.util
import platform

def print_section(title):
    """Print a section title with separation lines."""
    print("\n" + "=" * 80)
    print(f" {title} ".center(80, "="))
    print("=" * 80 + "\n")

def check_package(package_name):
    """Check if a package is installed and get its version."""
    try:
        spec = importlib.util.find_spec(package_name)
        if spec is None:
            return False, None
        
        # Try different ways of getting the version
        try:
            module = importlib.import_module(package_name)
            if hasattr(module, '__version__'):
                version = module.__version__
            elif hasattr(module, 'VERSION'):
                version = module.VERSION
            elif hasattr(module, 'version'):
                version = module.version
            else:
                # Try to get version using pip
                try:
                    result = subprocess.run(
                        [sys.executable, '-m', 'pip', 'show', package_name],
                        capture_output=True, text=True, check=True
                    )
                    for line in result.stdout.split('\n'):
                        if line.startswith('Version:'):
                            version = line.split(':', 1)[1].strip()
                            break
                    else:
                        version = "Unknown"
                except subprocess.CalledProcessError:
                    version = "Unknown"
            
            return True, version
        except Exception as e:
            return True, f"Error getting version: {str(e)}"
        
    except Exception as e:
        return False, str(e)

# Check system information
print_section("System Information")
print(f"Python version: {platform.python_version()}")
print(f"Platform: {platform.platform()}")
print(f"Architecture: {platform.architecture()}")
print(f"System: {platform.system()} {platform.release()}")

# Check CUDA availability
print_section("CUDA Information")
try:
    import torch
    print(f"PyTorch version: {torch.__version__}")
    print(f"CUDA available: {torch.cuda.is_available()}")
    if torch.cuda.is_available():
        print(f"CUDA version: {torch.version.cuda}")
        print(f"Number of CUDA devices: {torch.cuda.device_count()}")
        for i in range(torch.cuda.device_count()):
            print(f"Device {i}: {torch.cuda.get_device_name(i)}")
except Exception as e:
    print(f"Error checking CUDA: {e}")

# Check environment variables
print_section("Environment Variables")
important_vars = [
    "PYTHONPATH", "PERACT_ROOT", "COPPELIASIM_ROOT", 
    "LD_LIBRARY_PATH", "CUDA_HOME", "PATH"
]
for var in important_vars:
    print(f"{var}: {os.environ.get(var, 'Not set')}")

# Check critical packages
print_section("Critical Packages")
packages_to_check = [
    # Core packages
    "torch", "torchvision", "pytorch3d", "numpy", "scipy", 
    
    # PerAct-specific
    "clip", "einops", "hydra", "transformers", "pytorch3d", "trimesh", "pyrender",
    
    # RLBench and PyRep
    "rlbench", "pyrep",
    
    # YARR
    "yarr"
]

for pkg in packages_to_check:
    installed, version = check_package(pkg)
    status = "✅ Installed" if installed else "❌ Not installed"
    version_str = f"(version: {version})" if version else ""
    print(f"{pkg}: {status} {version_str}")

# Check if main components are properly installed
print_section("Component Availability")

# Check PyRep
print("Testing PyRep import...")
try:
    import pyrep
    from pyrep import PyRep
    print("✅ PyRep is properly installed")
except Exception as e:
    print(f"❌ PyRep error: {e}")

# Check RLBench
print("\nTesting RLBench import...")
try:
    import rlbench
    from rlbench.environment import Environment
    print("✅ RLBench is properly installed")
except Exception as e:
    print(f"❌ RLBench error: {e}")

# Check YARR
print("\nTesting YARR import...")
try:
    import yarr
    print("✅ YARR is properly installed")
except Exception as e:
    print(f"❌ YARR error: {e}")

# Check PerAct
print("\nTesting PerAct import...")
try:
    import peract
    print("✅ PerAct is properly installed")
except Exception as e:
    print(f"❌ PerAct error: {e}")

# Check if CoppeliaSim is available
print("\nChecking CoppeliaSim installation...")
if os.environ.get("COPPELIASIM_ROOT"):
    coppeliasim_path = os.environ.get("COPPELIASIM_ROOT")
    if os.path.exists(coppeliasim_path):
        print(f"✅ CoppeliaSim found at {coppeliasim_path}")
        
        # Check for the CoppeliaSim executable
        executable = os.path.join(coppeliasim_path, "coppeliaSim.sh")
        if os.path.exists(executable):
            print(f"✅ CoppeliaSim executable found at {executable}")
        else:
            print("❌ CoppeliaSim executable not found")
    else:
        print(f"❌ CoppeliaSim directory not found at {coppeliasim_path}")
else:
    print("❌ COPPELIASIM_ROOT environment variable not set")

# Overall summary
print_section("Overall Summary")
print("This script checked the basic environment setup for PerAct.")
print("If all components show as installed with proper versions, your container is set up correctly.")
print("If any errors appeared, they will need to be addressed before running the quickstart test.")
EOF

chmod +x scripts/test_env.py

### --- ADDITIONAL TEST SCRIPTS ---

# Create a script to test PyRep and CoppeliaSim connection
cat > scripts/test_pyrep.py << 'EOF'
#!/usr/bin/env python3
"""Test basic PyRep functionality with CoppeliaSim."""

import os
import sys
from pyrep import PyRep

print("Testing PyRep connection to CoppeliaSim...")
try:
    # Create a PyRep instance
    pr = PyRep()
    
    # Check if CoppeliaSim path is set
    coppeliasim_path = os.environ.get("COPPELIASIM_ROOT")
    if not coppeliasim_path:
        print("ERROR: COPPELIASIM_ROOT not set")
        sys.exit(1)
    
    print(f"CoppeliaSim path: {coppeliasim_path}")
    
    # Try to launch a headless instance (should work even on compute node)
    print("Launching headless CoppeliaSim instance...")
    pr.launch(coppeliasim_path + "/coppeliaSim.sh", headless=True)
    print("Successfully launched CoppeliaSim!")
    
    # Start the simulation
    print("Starting simulation...")
    pr.start()
    print("Simulation started successfully!")
    
    # Stop the simulation
    print("Stopping simulation...")
    pr.stop()
    print("Simulation stopped successfully!")
    
    # Shutdown
    print("Shutting down CoppeliaSim...")
    pr.shutdown()
    print("CoppeliaSim shut down successfully!")
    
    print("\n✅ PyRep and CoppeliaSim connection test PASSED!")
except Exception as e:
    print(f"\n❌ PyRep and CoppeliaSim connection test FAILED: {e}")
EOF

chmod +x scripts/test_pyrep.py

### --- RUN THE ENVIRONMENT TESTS ---
echo "Starting PerAct environment tests..."

# Run the environment test script
echo "1. Running package verification test..."
apptainer exec --nv \
    --pwd /local/work \
    -B $(pwd)/data:/local/data \
    -B $(pwd)/cache:/local/cache \
    -B $(pwd)/work:/local/work \
    -B $(pwd)/src:/local/src \
    -B $(pwd)/scripts:/local/scripts \
    -B $(pwd)/configs:/local/configs \
    -B $(pwd)/assets:/local/assets \
    -B $(pwd)/drema:/local/drema \
    -B $(pwd)/submodules:/local/submodules \
    ./peract-latest.sif \
    python /local/scripts/test_env.py

# Run the PyRep test
echo "2. Testing PyRep with CoppeliaSim..."
apptainer exec --nv \
    --pwd /local/work \
    -B $(pwd)/data:/local/data \
    -B $(pwd)/cache:/local/cache \
    -B $(pwd)/work:/local/work \
    -B $(pwd)/src:/local/src \
    -B $(pwd)/scripts:/local/scripts \
    -B $(pwd)/configs:/local/configs \
    -B $(pwd)/assets:/local/assets \
    -B $(pwd)/drema:/local/drema \
    -B $(pwd)/submodules:/local/submodules \
    ./peract-latest.sif \
    python /local/scripts/test_pyrep.py

echo "PerAct environment tests completed!"
