Bootstrap: docker
From: nvidia/cuda:11.7.1-cudnn8-runtime-ubuntu22.04

%labels
    Author Your Name / AI Assistant
    Version 1.2 # Incremented version again
    Description Container for 3D Diffuser Actor with RLBench (PerAct fork), PyRep, and dependencies.

%files
    CoppeliaSim_Edu_V4_1_0_Ubuntu20_04.tar.xz /root/install/

%post
    set -eux

    # --- Basic Setup ---
    chmod 1777 /tmp
    mkdir -p /var/tmp && chmod 1777 /var/tmp
    export TMPDIR=/var/tmp/
    export DEBIAN_FRONTEND=noninteractive

    apt-get update

    # --- NVIDIA Stubs ---
    apt-get install -y --no-install-recommends \
        nvidia-utils-515 \
        libnvidia-compute-515 \
        libnvidia-gl-515
    # No rm lists here yet

    # --- Base System Dependencies (Part 1 - Before PPA) ---
    # Update lists again just in case
    apt-get update
    apt-get install -y --no-install-recommends \
        build-essential \
        cmake \
        git \
        curl \
        wget \
        unzip \
        ca-certificates \
        gnupg \
        software-properties-common \
        cuda-command-line-tools-11-7

    # --- Add Deadsnakes PPA for Python 3.8 ---
    add-apt-repository ppa:deadsnakes/ppa -y
    apt-get update # IMPORTANT: Update *after* adding the PPA

    # --- System Dependencies (Part 2 - Incl Python 3.8 and Graphics/Font libs) ---
    # THIS IS THE CORRECTED COMMAND with packages listed
    apt-get install -y --no-install-recommends \
        python3.8 \
        python3.8-dev \
        python3.8-venv \
        python3-pip \
        libffi-dev \
        pkg-config \
        ninja-build \
        libfontconfig1 \
	libsodium23 \
        libglu1-mesa-dev \
        libgl1-mesa-glx \
        libglew-dev \
        libosmesa6-dev \
        libxrender1 \
        libsm6 \
        libxext6 \
        libxi-dev \
        libxinerama-dev \
        libxcursor-dev \
        libxcb1 \
        libx11-xcb1 \
        xvfb

    # Clean apt lists after ALL installs
    rm -rf /var/lib/apt/lists/*

    # --- Setup Python ---
    ln -sf /usr/bin/python3.8 /usr/bin/python3
    # Install pip for Python 3.8 using the correct bootstrap script
    echo "Downloading pip bootstrap script for Python 3.8..."
    curl https://bootstrap.pypa.io/pip/3.8/get-pip.py -o get-pip.py # <-- CORRECTED URL
    echo "Installing pip for Python 3.8..."
    python3.8 get-pip.py # Use python3.8 explicitly
    rm get-pip.py
    echo "Verifying pip version..."
    pip --version # Should show it's for Python 3.8
    # Now update the default pip symlink
    # Find the actual pip path (usually /usr/local/bin/pip or /usr/local/bin/pip3.8)
    PIP_PATH=$(which pip) 
    if [ -z "$PIP_PATH" ]; then
        echo "ERROR: pip command not found after installation!"
        exit 1
    fi
    echo "Found pip at ${PIP_PATH}. Creating symlinks..."
    ln -sf "${PIP_PATH}" /usr/bin/pip  
    ln -sf "${PIP_PATH}" /usr/bin/pip3 

    # Create and activate dedicated Python venv
    echo "Creating Python 3.8 venv..."
    python3 -m venv /opt/diffuser_venv
    . /opt/diffuser_venv/bin/activate
    echo "Upgrading pip inside venv..."
    python3 -m pip install --upgrade "pip<24.1" # Upgrade pip inside venv

    # --- Install CoppeliaSim ---
    # ... (Rest of the definition file remains the same) ...
    mkdir -p /opt/coppeliaSim
    tar -xJf /root/install/CoppeliaSim_Edu_V4_1_0_Ubuntu20_04.tar.xz \
        -C /opt/coppeliaSim --strip-components=1
    rm /root/install/CoppeliaSim_Edu_V4_1_0_Ubuntu20_04.tar.xz
    chmod +x /opt/coppeliaSim/coppeliaSim.sh

    # --- Set CoppeliaSim Env Vars (Needed for PyRep Build) ---
    export COPPELIASIM_ROOT=/opt/coppeliaSim
    export LD_LIBRARY_PATH=${COPPELIASIM_ROOT}:${LD_LIBRARY_PATH}
    export QT_QPA_PLATFORM_PLUGIN_PATH=${COPPELIASIM_ROOT}
    export QT_QPA_PLATFORM=offscreen

    # --- Install PyRep ---
    git clone --depth 1 https://github.com/stepjam/PyRep.git /root/install/PyRep
    cd /root/install/PyRep
    pip install -r requirements.txt
    VERBOSE=1 pip install -e .

    # --- Install RLBench (MohitShridhar/RLBench@peract fork) ---
    cd /root/install
    git clone --depth 1 -b peract https://github.com/MohitShridhar/RLBench.git /root/install/RLBench
    cd /root/install/RLBench
    sed -i "s/if self._succ_grasped is False:/if self._succ_grasped is None:/g" ./rlbench/tasks/close_jar.py 
    echo "Applied close_jar fix to RLBench."
    pip install -r requirements.txt
    pip install -e .

    # --- Install 3D Diffuser Actor Python Dependencies ---
    cd /root/install 
    . /opt/diffuser_venv/bin/activate # Ensure venv is active

    # Core ML/DL libs
    pip install torch==1.13.1+cu117 torchvision==0.14.1+cu117 torchaudio==0.13.1+cu117 --extra-index-url https://download.pytorch.org/whl/cu117
    
    # Install build dependencies for flash-attn FIRST
    pip install packaging wheel
   
    # Install CoppeliaSim Python interface dependencies
    pip install pyzmq cbor2

    # Other key diffuser dependencies
    pip install diffusers[torch]
    pip install dgl==1.1.3+cu117 -f https://data.dgl.ai/wheels/cu117/repo.html
    
    # Now install flash-attn
    pip install flash-attn==2.5.9.post1 --no-build-isolation 
    
    # Continue with other dependencies
    pip install git+https://github.com/openai/CLIP.git
    pip install open3d
    pip install \
        numpy==1.23.5 \
        pillow \
        einops \
        typed-argument-parser \
        tqdm \
        transformers \
        absl-py \
        matplotlib \
        scipy \
        tensorboard \
        opencv-python \
        blosc \
        setuptools

# ... (%environment and %runscript remain the same) ...
%environment
    export COPPELIASIM_ROOT=/opt/coppeliaSim
    export LD_LIBRARY_PATH=${COPPELIASIM_ROOT}:${LD_LIBRARY_PATH}
    export QT_QPA_PLATFORM_PLUGIN_PATH=${COPPELIASIM_ROOT}/platforms
    export QT_QPA_PLATFORM=offscreen
    export PYOPENGL_PLATFORM=egl
    export LIBGL_ALWAYS_SOFTWARE=1
    source /opt/diffuser_venv/bin/activate
    export PATH=/opt/diffuser_venv/bin:$PATH
    export PYTHONPATH=/root/install/PyRep:/root/install/RLBench:${PYTHONPATH}

%runscript
    echo "Activating Diffuser Actor venv..."
    source /opt/diffuser_venv/bin/activate
    echo "Executing command: $@"
    exec "$@"
